// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: user.proto

package user

import (
	"context"

	"github.com/lambertstu/shortlink-user-rpc/pb/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateGroupRequest     = user.CreateGroupRequest
	CreateGroupResponse    = user.CreateGroupResponse
	DeleteGroupRequest     = user.DeleteGroupRequest
	DeleteGroupResponse    = user.DeleteGroupResponse
	DeleteUserRequest      = user.DeleteUserRequest
	DeleteUserResponse     = user.DeleteUserResponse
	GetGroupRequest        = user.GetGroupRequest
	GetGroupResponse       = user.GetGroupResponse
	GetUserRequest         = user.GetUserRequest
	GetUserResponse        = user.GetUserResponse
	IsExistUserRequest     = user.IsExistUserRequest
	IsExistUserResponse    = user.IsExistUserResponse
	IsUserLoginRequest     = user.IsUserLoginRequest
	IsUserLoginResponse    = user.IsUserLoginResponse
	LoginRequest           = user.LoginRequest
	LoginResponse          = user.LoginResponse
	LogoutRequest          = user.LogoutRequest
	LogoutResponse         = user.LogoutResponse
	RegisterRequest        = user.RegisterRequest
	RegisterResponse       = user.RegisterResponse
	UpdateGroupRequest     = user.UpdateGroupRequest
	UpdateGroupResponse    = user.UpdateGroupResponse
	UpsertUserInfoRequest  = user.UpsertUserInfoRequest
	UpsertUserInfoResponse = user.UpsertUserInfoResponse

	User interface {
		Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
		Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
		Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
		GetUserByUsername(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
		IsExistUser(ctx context.Context, in *IsExistUserRequest, opts ...grpc.CallOption) (*IsExistUserResponse, error)
		IsUserLogin(ctx context.Context, in *IsUserLoginRequest, opts ...grpc.CallOption) (*IsUserLoginResponse, error)
		UpsertUserInfo(ctx context.Context, in *UpsertUserInfoRequest, opts ...grpc.CallOption) (*UpsertUserInfoResponse, error)
		DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUser) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUser) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Logout(ctx, in, opts...)
}

func (m *defaultUser) GetUserByUsername(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetUserByUsername(ctx, in, opts...)
}

func (m *defaultUser) IsExistUser(ctx context.Context, in *IsExistUserRequest, opts ...grpc.CallOption) (*IsExistUserResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.IsExistUser(ctx, in, opts...)
}

func (m *defaultUser) IsUserLogin(ctx context.Context, in *IsUserLoginRequest, opts ...grpc.CallOption) (*IsUserLoginResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.IsUserLogin(ctx, in, opts...)
}

func (m *defaultUser) UpsertUserInfo(ctx context.Context, in *UpsertUserInfoRequest, opts ...grpc.CallOption) (*UpsertUserInfoResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.UpsertUserInfo(ctx, in, opts...)
}

func (m *defaultUser) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.DeleteUser(ctx, in, opts...)
}
